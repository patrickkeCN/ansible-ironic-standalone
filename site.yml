---
# For Ubuntu 16.04 and Centos 7
# This is also an example of a playbook with all needed variables
# defined here instead of using the Ansible inventory.
# Please check the dhcp/pxe interface and ip address also defined in Vagrantfile!

- hosts: all
  become: yes
  # Normally these vars are defined in the inventory file or in group_vars
  vars:
    Ironic_database_root_password: "root"
    Ironic_database_host: "10.100.35.203"
    Ironic_messaging_host: "10.100.35.203"
    Ironic_messaging_user: "ironic"
    Ironic_messaging_pass: "rabbitmq"
    Ironic_messaging_vhost: "ironic"
    Ironic_database_user: "ironic"
    Ironic_database_pass: "ironic"
    Ironic_database_name: "ironic"
    Ironic_inspector_database_user: "inspector"
    Ironic_inspector_database_pass: "inspector"
    Ironic_inspector_database_name: "inspector"
    # IP address with default gateway
    Ironic_public_ip: "{{ ansible_default_ipv4.address }}"
    # Last IP address for PXE (2nd if the server has 2 ips)
    Ironic_private_ip: "10.100.35.203"
    # APIs
    Ironic_api_token: "fake"
    Ironic_api_public_url: "http://{{ Ironic_public_ip }}:6385/"
    Ironic_api_internal_url: "http://{{ Ironic_private_ip }}:6385/"
    Ironic_inspector_api_public_url: "http://{{ Ironic_public_ip }}:5050/v1/"
    Ironic_inspector_api_internal_url: "http://{{ Ironic_private_ip }}:5050/v1/"
    Ironic_http_public_url: "http://{{ Ironic_public_ip }}"
    Ironic_http_internal_url: "http://{{ Ironic_private_ip }}"
    # Conductor
    Ironic_conductor_drivers: ["pxe_ipmitool", "agent_ipmitool", "agent_vbox"]
    Ironic_conductor_clean_nodes: true
    Ironic_conductor_download_tinyipa: true
    Ironic_conductor_download_ipa: true
    # PXE
    Ironic_dhcp_iface: "eth3"
    Ironic_dhcp_params: ["10.100.35.2", "10.100.35.50", "30m"]
    Ironic_dhcp_domain: "pxe.local"
    Ironic_dhcp_options: ["option:dns-server,10.100.10.3"]
    Ironic_pxe_params: ["nofb", "nomodeset", "vga=normal", "coreos.autologin", "console=tty0", "console=ttyS0,115200n8"]
    # Paths
    Ironic_http_path: "/var/lib/ironic/http"
    Ironic_images_path: "/var/lib/ironic/http/images"
    Ironic_metadata_path: "/var/lib/ironic/http/metadata"
    Ironic_deploy_path: "/var/lib/ironic/http/deploy"
    Ironic_pxe_path: "/var/lib/ironic/tftpboot"
    # Bosh Lua registry
    Ironic_bosh_registry: true
    Ironic_bosh_registry_password: "{PLAIN}hola"
    # Additional variables for inspector rules
    #Ironic_deploy_kernel: "file://{{ Ironic_deploy_path }}/coreos_production_pxe.vmlinuz"
    #Ironic_deploy_ramdisk: "file://{{ Ironic_deploy_path }}/coreos_production_pxe_image-oem.cpio.gz"
    Ironic_deploy_kernel: "file://{{ Ironic_deploy_path }}/image.vmlinuz"
    Ironic_deploy_ramdisk: "file://{{ Ironic_deploy_path }}/image.initramfs"
    Ironic_configdrive_url: "{{ Ironic_http_internal_url }}/metadata"

  roles:
    - role: mysql
      mysql_root_password: "{{ Ironic_database_root_password }}"
      mysql_database_list:
        - name: "{{ Ironic_database_name }}"
        - name: "{{ Ironic_inspector_database_name }}"
      mysql_user_list:
        - name: "{{ Ironic_database_user }}"
          password: "{{ Ironic_database_pass }}"
          priv: "{{ Ironic_database_name }}.*:ALL"
          host: "%"
        - name: "{{ Ironic_inspector_database_user }}"
          password: "{{ Ironic_inspector_database_pass }}"
          priv: "{{ Ironic_inspector_database_name }}.*:ALL"
          host: "%"

    - role: rabbitmq
      rabbitmq_vhost_definition_list:
        - name: "{{ Ironic_messaging_vhost }}"
      rabbitmq_users_definition_list:
        - user: "{{ Ironic_messaging_user }}"
          password: "{{ Ironic_messaging_pass }}"
          vhost: "{{ Ironic_messaging_vhost }}"
          tags: [ "administrator", "management" ]

    - role: ironic
      ironic_debug: true
      ironic_inspector_enabled: true
      ironic_messaging_host: "{{ Ironic_messaging_host }}"
      ironic_messaging_userid: "{{ Ironic_messaging_user }}"
      ironic_messaging_password: "{{ Ironic_messaging_pass }}"
      ironic_messaging_virtual_host: "{{ Ironic_messaging_vhost }}"
      ironic_database_mysql_host: "{{ Ironic_database_host }}"
      ironic_database_mysql_userid: "{{ Ironic_database_user }}"
      ironic_database_mysql_password: "{{ Ironic_database_pass }}"
      ironic_database_mysql_db: "{{ Ironic_database_name }}"
      ironic_api_public_endpoint: "{{ Ironic_api_public_url }}"
      ironic_conductor_service_ironic_url: "{{ Ironic_api_internal_url }}"
      ironic_inspector_service_ironic_url: "{{ Ironic_api_internal_url }}"
      ironic_inspector_service_inspector_url: "{{ Ironic_inspector_api_internal_url }}"
      ironic_deploy_http_url: "http://{{ Ironic_private_ip }}/deploy"
      ironic_enabled_drivers: "{{ Ironic_conductor_drivers }}"
      ironic_pxe_ipa_download: "{{ Ironic_conductor_download_ipa }}"
      ironic_pxe_tinyipa_download: "{{ Ironic_conductor_download_tinyipa }}"
      ironic_conductor_automated_clean: "{{ Ironic_conductor_clean_nodes }}"
      ironic_conductor_sync_power_state_interval: 90
      ironic_pxe_tftp_server: "{{ Ironic_private_ip }}"
      ironic_pxe_append_params: "{{ Ironic_pxe_params }}"
      ironic_deploy_http_root: "{{ Ironic_deploy_path }}"
      ironic_pxe_images_path: "{{ Ironic_images_path }}"
      ironic_pxe_tftp_root: "{{ Ironic_pxe_path }}"
      ironic_cors_domains:
        ironic_webclient_private:
          allowed_origin: "http://{{ Ironic_private_ip }}"
          allow_credentials: True
        ironic_webclient_public:
          allowed_origin: "http://{{ Ironic_public_ip }}"
          allow_credentials: True
        ironic_webclient_ip:
          allowed_origin: "http://{{ ansible_default_ipv4.address }}"
          allow_credentials: True
        ironic_webclient_fqdn:
          allowed_origin: "http://{{ ansible_fqdn }}"
          allow_credentials: True
        ironic_webclient_host:
          allowed_origin: "http://{{ ansible_hostname }}"
          allow_credentials: True

    - role: inspector
      ironic_inspector_debug: true
      ironic_inspector_enabled: true
      ironic_inspector_discovery_enroll: true
      ironic_inspector_enroll_driver: "agent_ipmitool"
      ironic_inspector_api_url: "{{ Ironic_inspector_api_public_url }}"
      ironic_inspector_service_ironic_url: "{{ Ironic_api_internal_url }}"
      ironic_inspector_database_mysql_host: "{{ Ironic_database_host }}"
      ironic_inspector_database_mysql_userid: "{{ Ironic_inspector_database_user }}"
      ironic_inspector_database_mysql_password: "{{ Ironic_inspector_database_pass }}"
      ironic_inspector_database_mysql_db: "{{ Ironic_inspector_database_name }}"

    - role: dnsmasq
      dnsmasq_conf_domain: "{{ Ironic_dhcp_domain }}"
      dnsmasq_conf_dhcp:
        - device: "{{ Ironic_dhcp_iface }}"
          range: "{{ Ironic_dhcp_params }}"
          ignore_names: true
          generate_names: true
          option: "{{ Ironic_dhcp_options }}"
          boot:
          - "{{ ironic_pxe_bootfile_name }}"
          tftp: "{{ Ironic_pxe_path }}"

    - role: nginx
      nginx_lua: "{{ Ironic_bosh_registry }}"
      nginx_server_list:
        - name: "{{ ansible_hostname }}"
          listen:
            - ["80", "default_server"]
          root: "{{ Ironic_http_path }}"
          client_body_temp_path: "{{ Ironic_http_path }}/tmp"
          access_log: "/var/log/nginx/{{ ansible_hostname }}-server_access.log"
          lua_files: 
            - "files/bosh_webdav_lua_registry/webdav-registry.lua"
            - "files/bosh_webdav_lua_registry/JSON.lua"
          location_list:
            - name: "/v1/"
              proxy_set_header:
                - "X-Real-IP $remote_addr"
                - "X-Forwarded-For $proxy_add_x_forwarded_for"
                - "Host $http_host"
              proxy_pass: "http://10.100.35.203:6385"
            - name: "/"
              autoindex: "on"
            - name: "/images/"
              autoindex: "on"
              client_body_buffer_size: "16k" 
              client_max_body_size: "50G"
              create_full_put_path: "on"
              dav_access: "user:rw group:rw all:r"
              dav_methods: "PUT DELETE MKCOL COPY MOVE"
              default_type: "application/octet-stream"
            - name: "/deploy/"
              autoindex: "on"
              client_body_buffer_size: "16k" 
              client_max_body_size: "100M"
              create_full_put_path: "on"
              dav_access: "user:rw group:rw all:r"
              dav_methods: "PUT DELETE MKCOL COPY MOVE"
              default_type: "application/octet-stream"
            - name: "/metadata/"
              autoindex: "on"
              client_body_buffer_size: "16k" 
              client_max_body_size: "100M"
              create_full_put_path: "on"
              dav_access: "user:rw group:rw all:r"
              dav_methods: "PUT DELETE MKCOL COPY MOVE"
              default_type: "application/octet-stream"
              satisfy: "any"
              allow:
                - "127.0.0.0/24"
                - "{{ ansible_default_ipv4.address }}"
              auth:
                title: "Restricted Metadata"
                users:
                  metadata: "{PLAIN}hola"
            - name: "/registry/"
              autoindex: "off"
              default_type: "application/json"
              client_max_body_size: "10M"
              content_by_lua_file: "webdav-registry.lua"
              auth:
                title: "BOSH Registry Auth"
                users:
                  bosh: "{{ Ironic_bosh_registry_password }}"

    - role: webclient
      webclient_webdir_owner: "{{ nginx_user }}"
      webclient_webdir_group: "{{ ironic_group }}"

    - role: monit
      monit_monitoring_list:
        - name: mysql
          target: "{{ mysql_pidfile }}"
          script: "/usr/sbin/service {{ mysql_daemon }} %"
          rules:
          - "if failed port {{ mysql_port }} protocol mysql then restart"
          - "if 3 restarts within 3 cycles then timeout"
        - name: rabbitmq
          target: "{{ rabbitmq_pidfile }}"
          script: "/usr/sbin/service {{ rabbitmq_daemon }} %"
          rules:
          - "if failed port {{ rabbitmq_tcp_port }} type tcp then restart"
          - "if 3 restarts within 3 cycles then timeout"
        - name: ironic-api
          target: "{{ ironic_api_pidfile }}"
          script: "/usr/sbin/service {{ ironic_api_service_name }} %"
          rules:
          - "if failed port {{ ironic_api_port }} type tcp then restart"
          - "if 3 restarts within 3 cycles then timeout"
        - name: ironic-inspector
          target: "{{ ironic_inspector_pidfile }}"
          script: "/usr/sbin/service {{ ironic_inspector_service_name }} %"
          rules:
          - "if 3 restarts within 3 cycles then timeout"
        - name: nginx
          target: "{{ nginx_pidfile }}"
          script: "/usr/sbin/service {{ nginx_daemon }} %"
          rules:
          - "if failed port 80 type tcp then restart"
          - "if 3 restarts within 3 cycles then timeout"
        - name: ironic-conductor
          target: "{{ ironic_conductor_pidfile }}"
          script: "/usr/sbin/service {{ ironic_conductor_service_name }} %"
          rules:
          - "if 3 restarts within 3 cycles then timeout"
        - name: dnsmasq
          target: "{{ dnsmasq_pidfile }}"
          script: "/usr/sbin/service {{ dnsmasq_daemon }} %"
          rules:
          - "if failed port 53 type tcp protocol dns then restart"
          - "if 3 restarts within 3 cycles then timeout"

#  tasks:
#   - name: Display all variables/facts known for a host
#     debug: var=hostvars[inventory_hostname]

